# -*- coding: utf-8 -*-
"""Task 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_Uwdnq6VS1oWNq-SKwHHcsgcK2nSIhds

IMPORTING IMPORTANT LIBRARIES
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""IMPORTING DATASET

"""

df = pd.read_csv("/content/train.csv")
df.head(10)

df.shape

df.describe()

"""THERE ARE FEW MISSING VALUES IN AGE COLUMN

"""

df['Survived'].value_counts()

# now visualize the count of survivals wrt pclass
sns.countplot(x=df['Survived'], hue=df['Pclass'])

df["Sex"]

# now visualize the count of survivals wrt Gender
sns.countplot(x=df['Sex'], hue=df['Survived'])

# look at survival rate by sex
df.groupby('Sex')[['Survived']].mean()

df['Sex'].unique()

from sklearn.preprocessing import LabelEncoder
LabelEncoder = LabelEncoder()

df['Sex']= LabelEncoder.fit_transform(df['Sex'])

df.head()

df['Sex'], df['Survived']

sns.countplot(x=df['Sex'], hue=df["Survived"])

df.isna().sum()

# after dropping non required column
df=df.drop(['Age'], axis=1)

df_final = df
df_final.head(10)

"""MODEL TRAINING"""

X= df[['Pclass', 'Sex']]
Y=df['Survived']

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state= 0)

from sklearn.linear_model import LogisticRegression

log = LogisticRegression(random_state = 0)
log.fit(X_train, Y_train)

"""MODEL PREDICTION

"""

pred = print(log.predict(X_test))

print(Y_test)

import warnings
warnings.filterwarnings("ignore")

res= log.predict([[2,0]])

if(res==0):
  print("so sorry! not Survived")
else:
  print("Survived")